import os
import sqlite3
import logging
import requests
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    TEXT, DUE_DATE, PRIORITY, CUSTOM_DATE, 
    EDIT_CHOICE, EDIT_TEXT, EDIT_DATE, EDIT_PRIORITY, EDIT_CUSTOM_DATE
) = range(9)

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
PRIORITIES = {
    "üî¥ –í—ã—Å–æ–∫–∏–π": 3,
    "üü° –°—Ä–µ–¥–Ω–∏–π": 2, 
    "üîµ –ù–∏–∑–∫–∏–π": 1
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NewsAPI
NEWS_API_KEY = os.getenv('NEWS_API_KEY', '7c90fc1f9c9f46c2898f4f21684b5c57')
NEWS_API_URL = f"https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey={NEWS_API_KEY}"

class TaskManager:
    def __init__(self, db_path='/tmp/tasks.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    text TEXT NOT NULL,
                    due_date TEXT,
                    priority INTEGER DEFAULT 2,
                    status TEXT DEFAULT 'active',
                    created_at TEXT NOT NULL
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def add_task(self, user_id, text, due_date=None, priority=2):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            created_at = datetime.now().isoformat()
            
            cursor.execute('''
                INSERT INTO tasks (user_id, text, due_date, priority, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, text, due_date, priority, created_at))
            
            task_id = cursor.lastrowid
            
            conn.commit()
            conn.close()
            logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return task_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    def get_user_tasks(self, user_id, status='active'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM tasks 
                WHERE user_id = ? AND status = ?
                ORDER BY priority DESC, due_date ASC
            ''', (user_id, status))
            
            tasks = cursor.fetchall()
            conn.close()
            return tasks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []
    
    def get_task(self, task_id, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM tasks WHERE id = ? AND user_id = ?
            ''', (task_id, user_id))
            
            task = cursor.fetchone()
            conn.close()
            return task
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
            return None
    
    def update_task(self, task_id, user_id, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            if not kwargs:
                return False
                
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            set_clause = ", ".join([f"{key} = ?" for key in kwargs.keys()])
            values = list(kwargs.values()) + [task_id, user_id]
            
            cursor.execute(f'''
                UPDATE tasks SET {set_clause} 
                WHERE id = ? AND user_id = ?
            ''', values)
            
            success = cursor.rowcount > 0
            conn.commit()
            conn.close()
            
            if success:
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
            return False
    
    def delete_task(self, task_id, user_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                DELETE FROM tasks WHERE id = ? AND user_id = ?
            ''', (task_id, user_id))
            
            success = cursor.rowcount > 0
            conn.commit()
            conn.close()
            
            if success:
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞")
            return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager()

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"), KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")],
        [KeyboardButton("üì∞ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –º–µ–Ω—é"""
    try:
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏
üì∞ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê - —Å–≤–µ–∂–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏
‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üí° –°–æ–≤–µ—Ç: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å!
"""
        await update.message.reply_text(
            welcome_text, 
            reply_markup=get_main_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = """
üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:*
1. –ù–∞–∂–º–∏—Ç–µ "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:*
- "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
- "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏  
- "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏" - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ

*–ù–æ–≤–æ—Å—Ç–∏:*
- "üì∞ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê" - —Å–≤–µ–∂–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –°–®–ê

*–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:*
–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
`–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`
–ü—Ä–∏–º–µ—Ä: `2024-12-31 23:59`

üí° *–°–æ–≤–µ—Ç:* –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É!
"""
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é"""
    try:
        text = update.message.text
        
        if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
            await add_task_start(update, context)
        elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
            await list_tasks(update, context)
        elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
            await list_completed_tasks(update, context)
        elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏":
            await show_task_management(update, context)
        elif text == "üì∞ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê":
            await show_business_news(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await help_command(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é: {e}")

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–í–û–°–¢–ï–ô
async def show_business_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê"""
    try:
        await update.message.reply_text("üì° –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê...")
        
        news_data = await fetch_business_news()
        
        if news_data:
            await send_news_articles(update, news_data)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

async def fetch_business_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –°–®–ê"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–µ–π –°–®–ê...")
        
        response = requests.get(NEWS_API_URL, timeout=15)
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ NewsAPI: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            logger.info(f"–°—Ç–∞—Ç—É—Å NewsAPI: {data.get('status')}, –≤—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {data.get('totalResults', 0)}")
            
            if data['status'] == 'ok' and data['totalResults'] > 0:
                articles = data['articles']
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(articles)} –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–µ–π")
                return articles
            else:
                logger.warning("–ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
        else:
            logger.error(f"–û—à–∏–±–∫–∞ NewsAPI: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NewsAPI: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return None

async def send_news_articles(update, articles):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        news_text = "üì∞ **üá∫üá∏ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê**\n\n"
        
        for i, article in enumerate(articles[:8], 1):
            title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').strip()
            source = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            url = article.get('url', '#')
            description = article.get('description', '')
            published_at = article.get('publishedAt', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if published_at:
                try:
                    pub_date = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                    date_str = pub_date.strftime("%d.%m.%Y %H:%M")
                except ValueError:
                    date_str = published_at[:10]
            else:
                date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
            news_text += f"**{i}. {title}**\n"
            if description and description != title and len(description) > 10:
                clean_description = description[:120] + "..." if len(description) > 120 else description
                news_text += f"_{clean_description}_\n"
            news_text += f"üì∞ *{source}* | üïí {date_str}\n"
            news_text += f"üîó [–ß–∏—Ç–∞—Ç—å]({url})\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news")],
            get_back_button(),
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_news")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if len(news_text) > 4000:
            news_text = news_text[:4000] + "\n\n... (–Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–∫—Ä–∞—â–µ–Ω—ã)"
        
        await update.message.reply_text(
            news_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")

async def handle_news_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "refresh_news":
            await query.edit_message_text("üì° –û–±–Ω–æ–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç–∏...")
            
            news_data = await fetch_business_news()
            if news_data:
                news_text = "üì∞ **üá∫üá∏ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê**\n\n"
                
                for i, article in enumerate(news_data[:8], 1):
                    title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').strip()
                    source = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                    url = article.get('url', '#')
                    description = article.get('description', '')
                    published_at = article.get('publishedAt', '')
                    
                    if published_at:
                        try:
                            pub_date = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                            date_str = pub_date.strftime("%d.%m.%Y %H:%M")
                        except ValueError:
                            date_str = published_at[:10]
                    else:
                        date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                    
                    news_text += f"**{i}. {title}**\n"
                    if description and description != title and len(description) > 10:
                        clean_description = description[:120] + "..." if len(description) > 120 else description
                        news_text += f"_{clean_description}_\n"
                    news_text += f"üì∞ *{source}* | üïí {date_str}\n"
                    news_text += f"üîó [–ß–∏—Ç–∞—Ç—å]({url})\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news")],
                    get_back_button(),
                    [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_news")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if len(news_text) > 4000:
                    news_text = news_text[:4000] + "\n\n... (–Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã)"
                
                await query.edit_message_text(
                    news_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        elif query.data == "close_news":
            await query.edit_message_text("üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        elif query.data == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–î–ê–ß
async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        context.user_data.clear()
        context.user_data['current_step'] = 'text'
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º "back" –≤–º–µ—Å—Ç–æ "back_to_main"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=reply_markup
        )
        return TEXT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def add_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
        if update.message.text.lower() in ['–Ω–∞–∑–∞–¥', 'back', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
        context.user_data['task_text'] = update.message.text
        context.user_data['current_step'] = 'due_date'
        
        keyboard = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
            [InlineKeyboardButton("–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="3days")],
            [InlineKeyboardButton("üìÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="custom")],
            [InlineKeyboardButton("–ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data="no_date")],
            get_back_button()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚è∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return DUE_DATE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def add_task_due_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_choice = query.data
        
        if user_choice == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
            context.user_data['current_step'] = 'text'
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º "back" –≤–º–µ—Å—Ç–æ "back_to_main"
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
                reply_markup=reply_markup
            )
            return TEXT
        
        if user_choice == "custom":
            context.user_data['current_step'] = 'custom_date'
            keyboard = [get_back_button()]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`\n"
                "–ü—Ä–∏–º–µ—Ä: `2024-12-31 23:59`",
                reply_markup=reply_markup
            )
            return CUSTOM_DATE
        
        now = datetime.now()
        
        if user_choice == "today":
            due_date = now.replace(hour=23, minute=59, second=59)
        elif user_choice == "tomorrow":
            due_date = now + timedelta(days=1)
            due_date = due_date.replace(hour=23, minute=59, second=59)
        elif user_choice == "3days":
            due_date = now + timedelta(days=3)
            due_date = due_date.replace(hour=23, minute=59, second=59)
        else:  # no_date
            due_date = None
        
        context.user_data['due_date'] = due_date.isoformat() if due_date else None
        context.user_data['current_step'] = 'priority'
        
        keyboard = [
            [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="3")],
            [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="2")],
            [InlineKeyboardButton("üîµ –ù–∏–∑–∫–∏–π", callback_data="1")],
            get_back_button()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
            reply_markup=reply_markup
        )
        return PRIORITY
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def handle_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        custom_date = update.message.text.strip()
        
        if custom_date.lower() == '–Ω–∞–∑–∞–¥':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            context.user_data['current_step'] = 'due_date'
            
            keyboard = [
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
                [InlineKeyboardButton("–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="3days")],
                [InlineKeyboardButton("üìÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="custom")],
                [InlineKeyboardButton("–ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data="no_date")],
                get_back_button()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚è∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return DUE_DATE
        
        try:
            due_date = datetime.strptime(custom_date, "%Y-%m-%d %H:%M")
            if due_date < datetime.now():
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return CUSTOM_DATE
                
            context.user_data['due_date'] = due_date.isoformat()
            context.user_data['current_step'] = 'priority'
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="3")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="2")],
                [InlineKeyboardButton("üîµ –ù–∏–∑–∫–∏–π", callback_data="1")],
                get_back_button()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
                reply_markup=reply_markup
            )
            return PRIORITY
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`\n"
                "–ü—Ä–∏–º–µ—Ä: `2024-12-31 23:59`\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return CUSTOM_DATE
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def add_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            context.user_data['current_step'] = 'due_date'
            
            keyboard = [
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
                [InlineKeyboardButton("–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="3days")],
                [InlineKeyboardButton("üìÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="custom")],
                [InlineKeyboardButton("–ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data="no_date")],
                get_back_button()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return DUE_DATE
        
        priority = int(query.data)
        user_id = query.from_user.id
        task_text = context.user_data['task_text']
        due_date = context.user_data.get('due_date')
        
        task_id = task_manager.add_task(user_id, task_text, due_date, priority)
        
        if not task_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")
            return ConversationHandler.END
        
        priority_text = {3: "üî¥ –í—ã—Å–æ–∫–∏–π", 2: "üü° –°—Ä–µ–¥–Ω–∏–π", 1: "üîµ –ù–∏–∑–∫–∏–π"}[priority]
        
        if due_date:
            due_date_str = datetime.fromisoformat(due_date).strftime("%d.%m.%Y %H:%M")
        else:
            due_date_str = "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        confirmation_text = f"""
‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!

"{task_text}"
üìÖ –°—Ä–æ–∫: {due_date_str}
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}
ID: #{task_id}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á!
"""
        await query.edit_message_text(confirmation_text)
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        user_id = update.message.from_user.id
        tasks = task_manager.get_user_tasks(user_id)
        
        if not tasks:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
        
        response = format_tasks_list(tasks, "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

async def list_completed_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        user_id = update.message.from_user.id
        tasks = task_manager.get_user_tasks(user_id, 'completed')
        
        if not tasks:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
        
        response = format_tasks_list(tasks, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

def format_tasks_list(tasks, title):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    tasks_by_priority = {3: [], 2: [], 1: []}
    
    for task in tasks:
        task_id, _, text, due_date, priority, status, created_at = task
        tasks_by_priority[priority].append((task_id, text, due_date))
    
    response = f"{title}:\n\n"
    
    for priority in [3, 2, 1]:
        priority_tasks = tasks_by_priority[priority]
        if not priority_tasks:
            continue
            
        priority_text = {3: "üî¥ –í—ã—Å–æ–∫–∏–π", 2: "üü° –°—Ä–µ–¥–Ω–∏–π", 1: "üîµ –ù–∏–∑–∫–∏–π"}[priority]
        response += f"{priority_text} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n"
        
        for task_id, text, due_date in priority_tasks:
            if due_date:
                due_date_str = datetime.fromisoformat(due_date).strftime("%d.%m.%Y %H:%M")
                response += f"  #{task_id} - {text} (–¥–æ {due_date_str})\n"
            else:
                response += f"  #{task_id} - {text}\n"
        
        response += "\n"
    
    return response

async def show_task_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    try:
        user_id = update.message.from_user.id
        tasks = task_manager.get_user_tasks(user_id)
        
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
            return
        
        keyboard = []
        for task in tasks:
            task_id, _, text, due_date, priority, status, created_at = task
            priority_emoji = {3: "üî¥", 2: "üü°", 1: "üîµ"}[priority]
            button_text = f"{priority_emoji} #{task_id}: {text[:20]}..."
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"manage_{task_id}")])
        
        keyboard.append(get_back_button())
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_manage")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def handle_task_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_manage":
            await query.edit_message_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        if query.data == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            return
        
        task_id = int(query.data.split("_")[1])
        user_id = query.from_user.id
        
        task = task_manager.get_task(task_id, user_id)
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        context.user_data['manage_task_id'] = task_id
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")],
            get_back_button()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        task_text = task[2]
        priority = task[4]
        due_date = task[3]
        
        priority_text = {3: "üî¥ –í—ã—Å–æ–∫–∏–π", 2: "üü° –°—Ä–µ–¥–Ω–∏–π", 1: "üîµ –ù–∏–∑–∫–∏–π"}[priority]
        
        if due_date:
            due_date_str = datetime.fromisoformat(due_date).strftime("%d.%m.%Y %H:%M")
            task_info = f"–¥–æ {due_date_str}"
        else:
            task_info = "–±–µ–∑ —Å—Ä–æ–∫–∞"
        
        await query.edit_message_text(
            f"üìã –ó–∞–¥–∞—á–∞: {task_text}\n"
            f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}\n"
            f"üìÖ –°—Ä–æ–∫: {task_info}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def handle_management_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_list":
            await show_task_management_from_query(query)
            return
        
        if query.data == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await show_task_management_from_query(query)
            return
        
        action, task_id = query.data.split("_")
        task_id = int(task_id)
        user_id = query.from_user.id
        
        if action == "complete":
            success = task_manager.update_task(task_id, user_id, status='completed')
            if success:
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")
                
        elif action == "delete":
            task = task_manager.get_task(task_id, user_id)
            if task:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{task_id}")],
                    get_back_button(),
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{task[2]}'?",
                    reply_markup=reply_markup
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def show_task_management_from_query(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ callback query"""
    user_id = query.from_user.id
    tasks = task_manager.get_user_tasks(user_id)
    
    keyboard = []
    for task in tasks:
        task_id, _, text, due_date, priority, status, created_at = task
        priority_emoji = {3: "üî¥", 2: "üü°", 1: "üîµ"}[priority]
        button_text = f"{priority_emoji} #{task_id}: {text[:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"manage_{task_id}")])
    
    keyboard.append(get_back_button())
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_manage")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def handle_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_delete":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        if query.data == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–µ–π
            task_id = context.user_data.get('manage_task_id')
            if task_id:
                user_id = query.from_user.id
                task = task_manager.get_task(task_id, user_id)
                if task:
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task_id}")],
                        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")],
                        get_back_button()
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    task_text = task[2]
                    priority = task[4]
                    due_date = task[3]
                    
                    priority_text = {3: "üî¥ –í—ã—Å–æ–∫–∏–π", 2: "üü° –°—Ä–µ–¥–Ω–∏–π", 1: "üîµ –ù–∏–∑–∫–∏–π"}[priority]
                    
                    if due_date:
                        due_date_str = datetime.fromisoformat(due_date).strftime("%d.%m.%Y %H:%M")
                        task_info = f"–¥–æ {due_date_str}"
                    else:
                        task_info = "–±–µ–∑ —Å—Ä–æ–∫–∞"
                    
                    await query.edit_message_text(
                        f"üìã –ó–∞–¥–∞—á–∞: {task_text}\n"
                        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}\n"
                        f"üìÖ –°—Ä–æ–∫: {task_info}\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
            return
        
        if query.data.startswith("confirm_delete_"):
            task_id = int(query.data.split("_")[2])
            user_id = query.from_user.id
            
            success = task_manager.delete_task(task_id, user_id)
            if success:
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
        current_step = context.user_data.get('current_step', '')
        
        if current_step == 'text':
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            context.user_data.clear()
            return ConversationHandler.END
            
        elif current_step == 'due_date':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
            context.user_data['current_step'] = 'text'
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
                reply_markup=reply_markup
            )
            return TEXT
            
        elif current_step == 'priority':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            context.user_data['current_step'] = 'due_date'
            keyboard = [
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow")],
                [InlineKeyboardButton("–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="3days")],
                [InlineKeyboardButton("üìÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="custom")],
                [InlineKeyboardButton("–ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data="no_date")],
                get_back_button()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return DUE_DATE
        
        else:
            # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_text_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ '–Ω–∞–∑–∞–¥'"""
    try:
        text = update.message.text.lower()
        
        if text in ['–Ω–∞–∑–∞–¥', 'back', '–æ—Ç–º–µ–Ω–∞', 'cancel', '–º–µ–Ω—é']:
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            context.user_data.clear()
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
            reply_markup=get_main_menu()
        )
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        BOT_TOKEN = os.getenv('BOT_TOKEN')
        if not BOT_TOKEN:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        print(f"‚úÖ BOT_TOKEN: {'–ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print(f"‚úÖ NEWS_API_KEY: {'–ù–∞–π–¥–µ–Ω' if NEWS_API_KEY else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ConversationHandler
        add_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('add', add_task_start),
                MessageHandler(filters.Text("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), add_task_start)
            ],
            states={
                TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_text),
                    CallbackQueryHandler(handle_back_button, pattern="^back$")
                ],
                DUE_DATE: [
                    CallbackQueryHandler(add_task_due_date, pattern="^(today|tomorrow|3days|no_date|custom|back)$")
                ],
                CUSTOM_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_date),
                    CallbackQueryHandler(handle_back_button, pattern="^back$")
                ],
                PRIORITY: [
                    CallbackQueryHandler(add_task_priority, pattern="^(1|2|3|back)$")
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                MessageHandler(filters.Text("‚ùå –û—Ç–º–µ–Ω–∞"), cancel),
                CallbackQueryHandler(handle_back_button, pattern="^back$"),
                MessageHandler(filters.Text(["–Ω–∞–∑–∞–¥", "back", "–æ—Ç–º–µ–Ω–∞", "cancel"]), cancel)
            ]
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler('start', start))
        application.add_handler(CommandHandler('help', help_command))
        application.add_handler(CommandHandler('list', list_tasks))
        
        application.add_handler(add_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
        application.add_handler(MessageHandler(
            filters.Text([
                "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", 
                "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
                "üì∞ –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
            ]), 
            handle_menu_selection
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á
        application.add_handler(CallbackQueryHandler(handle_task_management, pattern="^manage_"))
        application.add_handler(CallbackQueryHandler(handle_management_action, pattern="^(complete_|delete_|back_to_list|back)$"))
        application.add_handler(CallbackQueryHandler(handle_delete_confirmation, pattern="^(confirm_delete_|cancel_delete|back)$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        application.add_handler(CallbackQueryHandler(handle_news_actions, pattern="^(refresh_news|close_news|back)$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
        application.add_handler(CallbackQueryHandler(handle_back_button, pattern="^back$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–∞–∑–∞–¥, –æ—Ç–º–µ–Ω–∞)
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_text_commands
        ))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üì∞ –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: –ê–ö–¢–ò–í–ù–ê (–±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê)")
        print("üîÑ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥: –ê–ö–¢–ò–í–ù–ê –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()